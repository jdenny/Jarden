Sample solutions:
 https://www.dropbox.com/sh/gblwxvuuc083jxr/AACgpYM2h5w8TWFN8uCAEcera?dl=0

Exercise 2 - Syntax Basics
	3 - using recursion
		algorithm should be x^n = x.x^n-1 if n is odd and +ve
		not x^n = n.x^n-1

OO Programming - slide 11, Companion Objects & Singletons
	"Objects are singletons, and members of objects are
	implicitly static"
	should this be
	"Objects are singletons, hence members of objects have
	similar characteristics to Java statics, but with
	inheritance & polymorphism"

Inheritance and Traits - slide 24, Packages
	is it appropriate to say "I think..."?
	
Numbering of exercises needs updating - 2 x Exercise 5

Collections and Generics, slide 27
	"A Stack can accept objects of type T or a subtype of T:
	abstract class Stack[+T]"
	perhaps better to say:
	if B is subclass of A then Stack[B] is a subtype of Stack[A]
	(as described in the notes on slide 29)

Collections and Generics, slide 29
	"but the fact that we put [+A] means that the type we're
	adding may not be an A." Both methods would work as they
	do without the '+'; see my comment for slide 27, plus
	description on slide 30.

Collections and Functional Programming, slide 8
	"foldRight is... so values are processed from left to right"
	should be
	"foldRight is... so values are processed from right to left"
	
Collections and Functional Programming, slide 10
	as an alternative to the groupBy & map statement, we could
	use the recently discussed mapValues:
		str.groupBy(c => c).mapValues(cs => cs.size)	

Collections and Functional Programming, slide 19
	for(i <= 0 to 2; ...)
	should be: for(i <- 0 to 2; ...

Pattern Matching, slide 4
	1st sample gives compilation warning, as default case
	cannot be reached
	
Pattern Matching, slide 6
	"case constructors create objects and compare them with
	the argument" - what does this mean?

Pattern Matching, slide 9
	"case h :: rest => sum(rest, s+h)" should be
	"case h :: rest => sumx(rest, s+h)"
	
Exercise 7 - Pattern Matching
	not sure how to use pattern matching to solve this problem	