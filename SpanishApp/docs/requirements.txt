TODO
prioritise everything in this list (including this line?)
outstanding tests
Short-term
	*sort words in engspa.txt, to reflect school words
	*JardenProviders
		there seems to be a bug: can only do 1 update
		add sort, find, link to Spanish app
Long-term
	have main dictionary in JardenProviders, plus extra text file online;
		as words mature, they can migrate to JardenProviders;
		this would require an extra column on the database, but we
		could use the now redundant LEVEL - see EngSpaQuiz.setUserLevel()
		Note that if we set words from main file to LEVEL=1, and words
		from extra file to LEVEL=2, when we updated the extra file we
		would have to delete all words with LEVEL=2, and reset nextID
		to numberOfRows + 1
	change EngSpa.Attribute from Enum to a String?
	for time and dates and places, use preposition, e.g.
	last Tuesday; at five o'clock; next June; to England; at the chemist
	make more use of Activity.Title, e.g. wordType, "Verb Table"
	make Spanish pronoun optional
	after successful DB update show how many rows inserted
		after failed update, dialog to ask if want to retry or restore to
		factory-installed version
	add checkBox to Activity Menu: "Verbs Only" (i.e. not in user settings, as it's temporary)
Original design spec:
	start work on new player fragment
		show existing players; add, update, delete player
		for new player, determine current level, and preferred
			question style; explain menu options
		save player level & fail data
		save user's preference for question type
	check can handle > 1 player
	
	abandon questionType (word, phrase, sentence) and add more phrases
		(and sentences!) to database
	long hold over anything pops up help text; explain this
		in introduction
	extend Provider to add search and sort criteria
	option to choose words from selected category, like in Python
	add id to wordFile, so when update database it still matches
	option to show fails as ListView; could select from them
		to choose next word
	check for duplicates when loading database
	free-standing java app to update and validate data file
		if duplicates, allow for alternative translations
	add level two words; see http://www.bbc.co.uk/schools/primarylanguages/spanish/all_about_me/colours/
	word (default), phrase, sentence
		word: the/a lion; he will eat; slowly; red; under // done
		phrase: the/a red lion; he will slowly eat
		sentence: the red lion will slowly eat a cow
	check if typed in wrong language? difficult!
	proper database design: have table for each type (wordType, qualifier, attribute)
		e.g. WordTypes = { int id, String wordType}
		this ensures database integrity, reduces size of DB, and saves me validating
		the ContentValues.
		This also gives us the option to get the types for the spinners from the DB!
		(like we did in Django/Python)
		See https://gate.ac.uk/

IMPROVEMENTS OVER AMAZEQUIZ
random files of Spanish now on SQLite database
proper concept of levels for PresetQuiz
userLevel held on database
improved algorithm for choosing next question
	user decides how many goes to have per word
	number of required rights based on number of wrongs
		at current level and previous levels
algorithm for establishing level of new user - not yet implemented!

SpanishQuiz requirements
----------------------------------------------
choose one of:
	1. word, verb phrase (e.g. we were eating), or phrase (e.g. the dog was eating the green carrot)
Note: generate random, but grammatically correct Spanish phrases

Use Cases:
	1. speak Spanish -> type Spanish
	2. speak Spanish -> type English
	3. speak & print Spanish -> type English
	4. print Spanish -> type English
	5. print English -> type Spanish
	6. random: any of above

Go: if no input, show answer
	if input
		check answer & mark accordingly (see below)
		if wrong ask question again (i.e. repeat until correct or no input)
		allow alternative answers 

Radio: word, verb phrase, sentence
Spinner: see use cases above
questionTextView
answerEditText
goButton, repeatButton (only applicable to use cases 1-3)

ability to download extra dictionary elements from web site
	i.e. similar to AmazeQuiz
	at start of app, check can connect to my server
	if so, check date of EngSpa.dat; if newer give user option to download new version
	also provide (menu?) option to download new version

objectives:
	suitable app for schools
	POC for using Scala and Python in Android
	help me with my Spanish

PLAN
done: textToSpeech; sqlite; conjugate verbs; download new words;
	replace Contract with EngSpaContract
	add extra fields to engSpa: attribute, difficulty
	return QuestionAnswer, instead of trashing EngSpa!
	refresh EngSpaList when database updated
	validate values for insert and update; this should be done
		using extra tables on database, e.g. WordTypes.
	restore database
	calculate student level - see levelAlgorithm.txt

PROPOSED ARCHITECTURE
EngSpaQuiz replace by Levels
	List<EngSpa> etc, as for Levels

EngSpa with added history

CURRENT ARCHITECTURE
* on method means @Override

SQLiteOpenHelper
	onCreate()
	onUpgrade()
	getWritableDatabase() -> returns engSpaDB:SQLiteDatabase

EngSpaSQLite (extends SQLiteOpenHelper)
	*onCreate() -> createTables; bulkInsert(rows from local file)
	bulkInsert(rows) -> iterate on insert(row)
	*onUpgrade() -> dropTable; onCreate()
	getCursor(criteria) -> engSpaDB.query(criteria)
	insert(row) -> engSpaDB.insert(row)
	insert(row, selection) -> engSpaDB.insert(row, selection)
	update(row) -> engSpaDB.update(row)
	delete(criteria) -> engSpaDB.delete(criteria)

EngSpaProvider (extends ContentProvider)
	*delete(criteria) -> engSpaSQLite.delete(criteria)
	*insert(row) -> engSpaSQLite.insert(row)
	*onCreate() -> new EngSpaSQLite()
	*query(criteria) -> engSpaSQLite.query(criteria)
	*update(row, criteria) -> engSpaSQLite.update(row, criteria)
	*bulkInsert(rows) -> engSpaSQLite.bulkInsert(rows)

ContentResolver
	query(criteria) -> engSpaProvider.query(criteria)
	insert(row) -> engSpaProvider.insert(row)
	update(row) -> engSpaProvider.update(row)
	delete(criteria) -> engSpaProvider.delete(criteria)
	bulkInsert(rows) -> engSpaProvider.bulkInsert(rows)
	call(customMethod) -> not used

SpanishApp
	onCreateView() ->...->	contentResolver.query(all rows)
	dbUpdate() -> getRowsFromWebPage
		contentResolver.delete(all rows)
		contentResolver.bulkInsert(rows)
	dbRestore() -> restore from local file in case dbUpdate fails
	
